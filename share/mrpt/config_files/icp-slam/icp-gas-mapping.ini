//------------------------------------------------------------
// Config file for the "ICP-SLAM" application
//
//              ~ The MRPT Library ~
//          Jose Luis Blanco Claraco (C) 2005-2008
//------------------------------------------------------------



//=======================================================
// Section: [ICP]
// Parameters of ICP inside the ICP-based SLAM class
//=======================================================
[ICP]
maxIterations    = 100   // The maximum number of iterations to execute if convergence is not achieved before
minAbsStep_trans = 1e-6  // If the correction in all translation coordinates (X,Y,Z) is below this threshold (in meters), iterations are terminated:
minAbsStep_rot   = 1e-6  // If the correction in all rotation coordinates (yaw,pitch,roll) is below this threshold (in radians), iterations are terminated:

thresholdDist    = 0.4   // Initial maximum distance for matching a pair of points
thresholdAng_DEG = 3     // An angular factor (in degrees) to increase the matching distance for distant points.

ALFA             = 0.5   // After convergence, the thresholds are multiplied by this constant and ICP keep running (provides finer matching)

smallestThresholdDist=0.05 // This is the smallest the distance threshold can become after stopping ICP and accepting the result.
onlyClosestCorrespondences=true // 1: Use the closest points only, 0: Use all the correspondences within the threshold (more robust sometimes, but slower)

// 0: icpClassic
// 1: icpLevenbergMarquardt
ICP_algorithm = icpClassic

// decimation to apply to the point cloud being registered against the map
// Reduce to "1" to obtain the best accuracy
corresponding_points_decimation = 5


//=======================================================
// Section: [MappingApplication]
// Use: Here comes global parameters for the app.
//=======================================================
[MappingApplication]
// The source file (RAW-LOG) with action/observation pairs
rawlog_file = D:\WORK\3- DATASETS\Dataset_MCEnose\GasMap 3D enose+MCenose\lab236map_2011-10-28_09h39m37s.rawlog

rawlog_offset=0				//

// The directory where the log files will be saved (left in blank if no log is required)
logOutput_dir=LOG_ICP-SLAM
LOG_FREQUENCY=150			// The frequency of log files generation:
SAVE_3D_SCENE=1
SAVE_POSE_LOG=0
CAMERA_3DSCENE_FOLLOWS_ROBOT=1

SHOW_PROGRESS_3D_REAL_TIME=1			//Indicates if the 3D real time map should be displayed 0-> false , 1-> true
SHOW_PROGRESS_3D_REAL_TIME_DELAY_MS=2	//

insertionLinDistance=1.0		// The distance threshold for inserting observations in the map (meters)
insertionAngDistance=30.0		// The distance threshold for inserting observations in the map (degrees)
+localizationLinDistance= 0.25		// The distance threshold for correcting odometry with ICP (meters)  
+localizationAngDistance= 10		// The distance threshold for correcting odometry with ICP (degrees)


matchAgainstTheGrid = true

alwaysInsertByClass = CObservationGasSensors

// ====================================================
//
//            MULTIMETRIC MAP CONFIGURATION
//
// ====================================================
// Creation of maps:
occupancyGrid_count=1
gasGrid_count=0		;number of gridmaps to generate
wifiGrid_count=0	;number of gridmaps to generate
landmarksMap_count=0
beaconMap_count=0
pointsMap_count=1

// Selection of map for likelihood: (fuseAll=-1,occGrid=0, points=1,landmarks=2,gasGrid=3)
likelihoodMapSelection=-1


// ====================================================
//   MULTIMETRIC MAP: PointsMap #00
// ====================================================
// Creation Options for PointsMap 00:
[MappingApplication_pointsMap_00_insertOpts]
minDistBetweenLaserPoints=0.03
fuseWithExisting=0
isPlanarMap=1


// ====================================================
//   MULTIMETRIC MAP: OccGrid #00
// ====================================================
// Creation Options for OccupancyGridMap 00:
[MappingApplication_occupancyGrid_00_creationOpts]
resolution=0.05
disableSaveAs3DObject=0

// Insertion Options for OccupancyGridMap 00:
[MappingApplication_occupancyGrid_00_insertOpts]
mapAltitude=0
useMapAltitude=0
maxDistanceInsertion=25
maxOccupancyUpdateCertainty=0.65
considerInvalidRangesAsFreeSpace=false
minLaserScanNoiseStd=0.001


// ====================================================
//   MULTIMETRIC MAP: GasMap #00
// ====================================================
// Creation Options for CGasConcentrationGridMap2D 00:
[MappingApplication_gasGrid_00_creationOpts]
// See CGasConcentrationGridMap2D::CGasConcentrationGridMap2D for the possible values
mapType    = mrKalmanFilter				// mrKernelDM, mrKalmanFilter, mrKalmanApproximate, mrKernelDMV
min_x      = -2
max_x      = 4
min_y      = -2
max_y      = 2
resolution = 0.05  					//m longitud del lado de celda (must be small for mapType=0)
disableSaveAs3DObject=false


// Insertion Options for CGasConcentrationGridMap2D 00:
[MappingApplication_gasGrid_00_insertOpts]
sigma = 0.5							// The sigma of the "Parzen"-kernel Gaussian. 
cutoffRadius = 0.40 				// The cutoff radius for updating cells. 

KF_covSigma=0.45 					// [KF model] The "sigma" for the initial covariance value between cells (in meters). 
KF_observationModelNoise = 0.30 	// [KF model] The sensor model noise (in normalized concentration units). 
KF_initialCellStd=1.0 				// [KF model] The initial standard deviation of each cell's concentration (will be stored both at each cell's structure and in the covariance matrix as variances in the diagonal) (in normalized concentration units). 
KF_defaultCellMeanValue = 0.0 		// [KF model] The default/initial mean of each cell's concentration
KF_W_size=10						// [KFapprox model] The size of the window that restricts the correlation between cells
KF_sensorType = 9282				//Sensor type to generate the map  0=mean of all sensors ; 0x6810, 0x2120, etc (9760 = 0x2620, 9728 = 0x2600, 9282 = 0x2442)

enose_id = 0						//id of the enose used to generate this map (must be < gasGrid_count)
VoltageDivider_Res = 10000 			//Resistance used in the measurement circuit Voltage divider
R_min = 0.47						// Minimum normalization value.
R_max = 1.59						// Maximum normalization value.
useMOSmodel	= 0						//Use MOS model previous mapType implementation

//MOSmodel parameters
	tauR = 2.5 													//1.94	// Value for 0x2600 and 0x2620
	winNoise_size = 30	    					//[useMOSmodel] size for windows noise filtering
	decimate_value = 6						//[useMOSmodel] decimation value after noise filtering
	lastObservations_size = 6					//Must be higher than max delay_value/decimate_value
	calibrated_tauD_voltages = [0.5 0.983 1.263 2.01]		//Voltages values of the sensorID at the calibration points.
	calibrated_tauD_values = [5.8 5.8 7.6 13]			//Tau_d
	calibrated_delay_RobotSpeeds = [0.022 0.072 0.146 0.21]		//[m/s]
	calibrated_delay_values	= [4 12 20 24]				//Number of delayed samples before decimation
	save_maplog = false											//[useMOSmodel] Boolean value to save the gas map as a log file (./log_MOSmodel_MAP_'sensorType'.txt)
	


// [0.2732 0.2966 0.3363 0.4832],[9 9 11.4 12.4]  0x2600
// [0.5540 0.683 0.963 1.71],[6.7 6.7 8.7 13]  0x2620
// [0.5 0.983 1.263 2.01],[6 6.03 7.6 13]

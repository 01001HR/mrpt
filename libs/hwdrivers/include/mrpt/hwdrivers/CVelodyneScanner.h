/* +---------------------------------------------------------------------------+
   |                     Mobile Robot Programming Toolkit (MRPT)               |
   |                          http://www.mrpt.org/                             |
   |                                                                           |
   | Copyright (c) 2005-2015, Individual contributors, see AUTHORS file        |
   | See: http://www.mrpt.org/Authors - All rights reserved.                   |
   | Released under BSD License. See details in http://www.mrpt.org/License    |
   +---------------------------------------------------------------------------+ */

#ifndef CVelodyneScanner_H
#define CVelodyneScanner_H

#include <mrpt/hwdrivers/CGenericSensor.h>
#include <mrpt/obs/CObservationVelodyneScan.h>
#include <mrpt/obs/CObservationGPS.h>
#include <mrpt/utils/CConfigFileBase.h>

namespace mrpt
{
	namespace hwdrivers
	{
		/** An interface to Velodyne laser scanners (HDL-32E, VLP-16)
		  *
		  *  <h2>Configuration and usage:</h2> <hr>
		  * Data is returned as observations of type: 
		  *  - mrpt::obs::CObservationVelodyneScan for one or more "data packets" (refer to Velodyne usage manual) 
		  *  - mrpt::obs::CObservationGPS for GPS (GPRMC) packets, if available via the synchronization interface of the device.
		  *  See those classes for documentation on their fields.
		  *
		  * Configuration includes setting the device IP, model and RPM rotation speed (for calculating how many packets form a scan).
		  * These parameters can be set programatically (see methods of this class), or via a configuration file with CGenericSensor::loadConfig()
		  *
		  * Grabbing live data:
		  *  - See CGenericSensor for a general overview of the sequence of methods to be called: loadConfig(), initialize(), doProcess(). 
		  *  - Or use this class inside the application [rawlog-grabber](http://www.mrpt.org/list-of-mrpt-apps/application-rawlog-grabber/). See example config files: XXX
		  *
		  * See the source code of the example application `[MRPT]/apps/velodyne-view` for more details.
		  *
		  * <h2>Format of parameters for loading from a .ini file</h2><hr>
		  *
		  *  \code
		  *  PARAMETERS IN THE ".INI"-LIKE CONFIGURATION STRINGS:
		  * -------------------------------------------------------
		  *   [supplied_section_name]
		  *
		  *   model      = VLP16          // Can be any of: 64E_S2, 64E_S2.1, 64E, 32E, VLP16
		  *   device_ip  = 192.168.51.70  // IP address of the device. UDP packets from other IPs will be ignored.
		  *   rpm        = 600            // Device spinning speed
		  *
		  *    # 3D position of the sensor on the vehicle:
		  *   pose_x     = 0      // 3D position (meters)
		  *   pose_y     = 0
		  *   pose_z     = 0
		  *   pose_yaw   = 0    // 3D orientation (degrees)
		  *   pose_pitch = 0
		  *   pose_roll  = 0
		  *
		  *  \endcode
		  *
		  * \note New in MRPT 1.3.3
		  * \ingroup mrpt_hwdrivers_grp
 		  */
		class HWDRIVERS_IMPEXP CVelodyneScanner : public mrpt::hwdrivers::CGenericSensor
		{
			DEFINE_GENERIC_SENSOR(CVelodyneScanner)

		protected:
			std::string   m_model;      //!< Default: "VLP16"
			std::string   m_device_ip;  //!< Default: "192.168.51.70"
			int           m_rpm;        //!< Default: 600

			/** See the class documentation at the top for expected parameters */
			void  loadConfig_sensorSpecific(
				const mrpt::utils::CConfigFileBase &configSource,
				const std::string			&section );

		public:
			CVelodyneScanner( );
			virtual ~CVelodyneScanner();

			/** @name Change configuration parameters; to be called BEFORE initialize(); see above for the list of parameters and their meaning
			  * @{ */
			void setModelName(const std::string & model) { m_model = model; }
			const std::string &getModelName() const { return m_model; }

			void setDeviceIP(const std::string & ip) { m_device_ip = ip; }
			const std::string &getDeviceIP() const { return m_device_ip; }

			void setDeviceRPM(const int rpm) { m_rpm = rpm; }
			int getDeviceRPM() const { return m_rpm; }
			/** @} */

			/** Polls the UDP port for incoming data packets. The user *must* call this method in a timely fashion to grab data as it it generated by the device. 
			  *  The minimum call rate should be the expected number of data packets/second (!=scans/second). Checkout Velodyne user manual if in doubt.
			  *
			  * \param[out] outScan Upon return, an empty smart pointer will be found here if no new data was available. Otherwise, a valid scan.
			  * \param[out] outGPS  Upon return, an empty smart pointer will be found here if no new GPS data was available. Otherwise, a valid GPS reading.
			  * \return true if no error ocurred (even if there was no new observation). false if any communication error occurred.
			  */
			bool getNextObservation(
				mrpt::obs::CObservationVelodyneScanPtr & outScan,
				mrpt::obs::CObservationGPSPtr          & outGPS
				);

			// See docs in parent class
			void  doProcess();

			/** Tries to initialize the sensor, after setting all the parameters with a call to loadConfig.
			  *  \exception This method must throw an exception with a descriptive message if some critical error is found.
			  */
			virtual void initialize();

		}; // end of class
	} // end of namespace
} // end of namespace


#endif


